name: ci

on: [push]

jobs:
  docker:
    runs-on: ubuntu-latest
    env:
      DOCKER_REPO: ${{ secrets.DOCKER_REPO }}

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Set up QEMU for cross-platform builds
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to JFrog Artifactory
        run: echo "${{ secrets.JF_TOKEN }}" | docker login ${{ secrets.JF_URL }} -u ${{ secrets.JF_USERNAME }} --password-stdin

      - name: Build and push multi-arch Docker image
        run: |
          docker buildx create --use
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --tag kimt.jfrog.io/test-local-basselm/oceaneeringgg/actions-runner-linux:0.1.2-beta.14 \
            --push .

      - name: Set up JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ secrets.JF_URL }}

      - name: Configure JFrog CLI
        run: |
          jf c add my-server --url=${{ secrets.JF_URL }} --user=${{ secrets.JF_USERNAME }} --password=${{ secrets.JF_TOKEN }} --interactive=false
          jf c use my-server
      
      - name: Create metadata.json
        id: create_metadata
        run: |
          # Inspect the pushed image and extract the digest
          DIGEST=$(docker buildx imagetools inspect kimt.jfrog.io/test-local-basselm/oceaneeringgg/actions-runner-linux:0.1.2-beta.14 --format '{{ json .Manifest }}' | jq -r '.Descriptor.digest')
          
          # Echo the digest to see the output
          echo "Image digest: $DIGEST"
      
          if [ -z "$DIGEST" ]; then
            echo "Error: Unable to retrieve image digest"
            exit 1
          fi
      
          # Ensure the correct format for the metadata.json
          echo "kimt.jfrog.io/test-local-basselm/oceaneeringgg/actions-runner-linux:0.1.2-beta.14@$DIGEST" > metadata.json
      
          # Log the content of metadata.json for debugging
          echo "Content of metadata.json:"
          cat metadata.json




      - name: Deploy build-info
        run: |
          # Log the content of metadata.json again for visibility
          echo "Using the following metadata.json:"
          cat metadata.json
          
          jf rt build-docker-create test-local-basselm --image-file metadata.json
          jf rt bce github-actions-build 1
          jf rt bag github-actions-build 1
          jf rt bp github-actions-build 1 --dry-run
          jf rt bp github-actions-build 1
      - name: Promote build
        if: github.ref == 'refs/heads/main'
        run: |
          jf rt build-promote github-actions-build 1 --status=released

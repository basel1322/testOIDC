name: ci

on:
  push:

jobs:
  docker:
    runs-on: ubuntu-latest
    env:
      DOCKER_REPO: ${{ secrets.DOCKER_REPO }}  # Set DOCKER_REPO as a job-level environment variable

    permissions:
      contents: read
      id-token: write  # Grant permission to request the OIDC token

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Get ID Token
        id: get_id_token
        run: |
          ID_TOKEN=$(curl -sLS -H "User-Agent: actions/oidc-client" -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
          "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=Jfrog-github" | jq .value | tr -d '"')
          echo "ID_TOKEN=${ID_TOKEN}" >> $GITHUB_ENV

      - name: Exchange ID Token for Access Token
        id: exchange_token
        env:
          ID_TOKEN: ${{ env.ID_TOKEN }}
          JFROG_PLATFORM_URL: https://elinaf.jfrog.io
        run: |
          ACCESS_TOKEN=$(curl -XPOST -H "Content-Type: application/json" \
          -d "{\"grant_type\": \"urn:ietf:params:oauth:grant-type:token-exchange\", \"subject_token_type\":\"urn:ietf:params:oauth:token-type:id_token\", \"subject_token\": \"${ID_TOKEN}\", \"provider_name\": \"test1322\"}" \
          "https://elinaf.jfrog.io/access/api/v1/oidc/token" | jq -r .access_token | tr -d '"')
          echo "ACCESS_TOKEN=${ACCESS_TOKEN}" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up JFrog CLI with OIDC
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: https://elinaf.jfrog.io
        with:
          oidc-provider-name: test1322
          oidc-audience: Jfrog-github
          PLATFORM-REPO: test-local-basselm

      - name: Login to JFrog Artifactory using OIDC
        run: |
          # Use the access token for docker login
          echo "${ACCESS_TOKEN}" | docker login ${{ secrets.JF_URL }} -u ${{ secrets.JF_USERNAME }} --password-stdin

      - name: Build and Push Docker Image to JFrog Artifactory
        uses: docker/build-push-action@v6
        with:
          context: .  # Use `.` if Dockerfile is at the root of the repository
          push: true
          tags: elinaf.jfrog.io/test-local-basselm/oceaneeringg/actions-runnerrr-linux:0.1.2-beta.14

      - name: Publish Build Info with JFrog CLI
        run: |
          # Configure JFrog CLI with username and token
          jf c add my-server --url=${{ secrets.JF_URL }} --interactive=false
          
          # Collect environment variables for the build
          jf rt build-collect-env github-actions-build 1 

          # Collect VCS details from git and add them to the build
          jf rt build-add-git github-actions-build 1 --server-id=my-server

          # Publish build info to JFrog Artifactory
          jf rt build-publish github-actions-build 1 --server-id=my-server
